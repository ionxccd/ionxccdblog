    def __init__(self, *args, **kwargs):
        super(UserInfoForm, self).__init__(*args, **kwargs)
        kwargs.setdefault('label_suffix', '')
        self.fields['password1'].widget = forms.PasswordInput(attrs={ 'placeholder': 'Enter Password'})
        self.fields['password2'].widget = forms.PasswordInput(attrs={ 'placeholder': 'Confirm Password'})
        self.fields['username'].label = ""
        self.fields['email'].label = ""
        self.fields['password1'].label = ""
        self.fields['password2'].label = ""

    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']
        widgets = {
            'username': forms.TextInput(attrs={ 'placeholder': 'Enter Username'}),
            'email': forms.EmailInput(attrs={ 'placeholder':'Enter Email'}),
        }

def videoUpload(request):
    if request.method == "POST":
        forms = SearchVideo(request.POST or None)
        form = VideoForm(request.POST or None, request.FILES)
        if form.is_valid():
            title = form.cleaned_data.get('VideoTitle')
            content = form.cleaned_data.get('VideoContent')
            thumbnail = form.cleaned_data.get('VideoThumbnail')
            desprption = form.cleaned_data.get('VideoDescription')
            conn = sqlite3.connect('db.sqlite3')
            conn.row_factory = lambda cursor, row: row[0]
            cursor = conn.cursor()
            ad = cursor.execute('SELECT VideoID FROM Home_videoinfo').fetchall()
            def runAll():
                global userCode
                a = randint(1000000, 9999999)
                if a in ad:
                    runAll()
                else:
                    userCode = a
            runAll()
            time = datetime.datetime.now()
            foo_instance = VideoInfo(id=userCode, VideoTitle=title, VideoContent=content,
            VideoThumbnail=thumbnail, dateUploaded=time, VideoDescription=desprption, 
            VideoLikes=0, VideoDislikes=0, VideoID=userCode, VideoViews=0)
            foo_instance.save(force_insert=True)
            return render(request, "Home/CreateVideo.html", {"form":form, "forms":forms})
    else:
        form = VideoForm()
        forms = SearchVideo(request.POST or None)
    return render(request, "Home/CreateVideo.html", {"form":form, "forms":forms})